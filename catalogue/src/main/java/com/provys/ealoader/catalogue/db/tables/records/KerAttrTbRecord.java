/*
 * This file is generated by jOOQ.
 */
package com.provys.ealoader.catalogue.db.tables.records;


import com.provys.ealoader.catalogue.db.tables.KerAttrTb;

import java.math.BigDecimal;
import java.math.BigInteger;

import javax.annotation.Generated;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Attribute (catalogue)
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KerAttrTbRecord extends UpdatableRecordImpl<KerAttrTbRecord> {

    private static final long serialVersionUID = -691916042;

    /**
     * Setter for <code>KER.KER_ATTR_TB.ATTR_ID</code>.
     */
    public void setAttrId(BigInteger value) {
        set(0, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ATTR_ID</code>.
     */
    public BigInteger getAttrId() {
        return (BigInteger) get(0);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.ENTITY_ID</code>. UID of entity attribute belongs to
     */
    public void setEntityId(BigInteger value) {
        set(1, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ENTITY_ID</code>. UID of entity attribute belongs to
     */
    public BigInteger getEntityId() {
        return (BigInteger) get(1);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.NAME_NM</code>. Internal name of attribute (name of column / textcolumn in database); also default for shortname
     */
    public void setNameNm(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.NAME_NM</code>. Internal name of attribute (name of column / textcolumn in database); also default for shortname
     */
    public String getNameNm() {
        return (String) get(2);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.NAME</code>. Name of attribute
     */
    public void setName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.NAME</code>. Name of attribute
     */
    public String getName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.NOTE</code>. Note; initialized from comment on given column for "C" and "T" attributes
     */
    public void setNote(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.NOTE</code>. Note; initialized from comment on given column for "C" and "T" attributes
     */
    public String getNote() {
        return (String) get(4);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.ATTRTYPE</code>. Type of attribute (C=column, T=text column, F=free attribute, I=financial attribute, Q=free SQL, O=formula)
     */
    public void setAttrtype(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ATTRTYPE</code>. Type of attribute (C=column, T=text column, F=free attribute, I=financial attribute, Q=free SQL, O=formula)
     */
    public String getAttrtype() {
        return (String) get(5);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.ISCUSTOM</code>. Custom for instalation
     */
    public void setIscustom(String value) {
        set(6, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ISCUSTOM</code>. Custom for instalation
     */
    public String getIscustom() {
        return (String) get(6);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.ISUSED</code>. Used on installation
     */
    public void setIsused(String value) {
        set(7, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ISUSED</code>. Used on installation
     */
    public String getIsused() {
        return (String) get(7);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.ATTRGRP_ID</code>. Attribute group attribute belongs to; used for grouping free or financial attributes on client
     */
    public void setAttrgrpId(BigInteger value) {
        set(8, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ATTRGRP_ID</code>. Attribute group attribute belongs to; used for grouping free or financial attributes on client
     */
    public BigInteger getAttrgrpId() {
        return (BigInteger) get(8);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.ORD</code>. Ordering of attributes within group; attributes with same ORD are usually ordered using name
Ordering is used for generate
     */
    public void setOrd(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ORD</code>. Ordering of attributes within group; attributes with same ORD are usually ordered using name
Ordering is used for generate
     */
    public Integer getOrd() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.DOMAIN_ID</code>. Domain
     */
    public void setDomainId(BigInteger value) {
        set(10, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.DOMAIN_ID</code>. Domain
     */
    public BigInteger getDomainId() {
        return (BigInteger) get(10);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.SUBDOMAIN_NM</code>. Subdomain - closer specification of domain
     */
    public void setSubdomainNm(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.SUBDOMAIN_NM</code>. Subdomain - closer specification of domain
     */
    public String getSubdomainNm() {
        return (String) get(11);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.QVISIBLE</code>. Attribute is visible to users by default; setting can be overriden on profile level (see attribute profile settings).
     */
    public void setQvisible(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.QVISIBLE</code>. Attribute is visible to users by default; setting can be overriden on profile level (see attribute profile settings).
     */
    public String getQvisible() {
        return (String) get(12);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.LLENGTH</code>. Default length of atribute in lists
     */
    public void setLlength(Integer value) {
        set(13, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.LLENGTH</code>. Default length of atribute in lists
     */
    public Integer getLlength() {
        return (Integer) get(13);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.INDEXED</code>. Column is indexed; only usable for "C" attributes
     */
    public void setIndexed(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.INDEXED</code>. Column is indexed; only usable for "C" attributes
     */
    public String getIndexed() {
        return (String) get(14);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.UPNAME_NM</code>. Name of upper-cased column; only usable for "C" or "T" attributes
     */
    public void setUpnameNm(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.UPNAME_NM</code>. Name of upper-cased column; only usable for "C" or "T" attributes
     */
    public String getUpnameNm() {
        return (String) get(15);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.READONLY</code>. Value of attribute cannot be (directly) set by user.
- for columns and text (translated) attributes this has to be N, no checking is performed
- for formulas and SQL attributes, this has to be Y as it is never possible to modify their values
- for financial attributes, it is not possible to set value (or even define accounting rule for change of value) if attribute is read-only; value should be changed either through other financial attribute or by creating accounting records using other methods (through planned operations or some interface). If it is not read-only, accounting rule must be defined
- for free attributes, if free attribute is marked as read-only, user cannot change its value directly, it is only possible to change it using PG version of mp_Set with p_ChangeReadOnly=TRUE. It can be used for attributes which are replicated from other system or set through CP interface of some entity
     */
    public void setReadonly(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.READONLY</code>. Value of attribute cannot be (directly) set by user.
- for columns and text (translated) attributes this has to be N, no checking is performed
- for formulas and SQL attributes, this has to be Y as it is never possible to modify their values
- for financial attributes, it is not possible to set value (or even define accounting rule for change of value) if attribute is read-only; value should be changed either through other financial attribute or by creating accounting records using other methods (through planned operations or some interface). If it is not read-only, accounting rule must be defined
- for free attributes, if free attribute is marked as read-only, user cannot change its value directly, it is only possible to change it using PG version of mp_Set with p_ChangeReadOnly=TRUE. It can be used for attributes which are replicated from other system or set through CP interface of some entity
     */
    public String getReadonly() {
        return (String) get(16);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.GETOPTYPE_ID</code>. Operation type tested when accessing value of attribute
     */
    public void setGetoptypeId(BigInteger value) {
        set(17, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.GETOPTYPE_ID</code>. Operation type tested when accessing value of attribute
     */
    public BigInteger getGetoptypeId() {
        return (BigInteger) get(17);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.SETOPTYPE_ID</code>. Operation type tested when changing value of attribute
     */
    public void setSetoptypeId(BigInteger value) {
        set(18, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.SETOPTYPE_ID</code>. Operation type tested when changing value of attribute
     */
    public BigInteger getSetoptypeId() {
        return (BigInteger) get(18);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.RESETOPTYPE_ID</code>. Operation type tested when changing value of attribute to NULL; if not specified, SETOPTYPE_ID is used instead
     */
    public void setResetoptypeId(BigInteger value) {
        set(19, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.RESETOPTYPE_ID</code>. Operation type tested when changing value of attribute to NULL; if not specified, SETOPTYPE_ID is used instead
     */
    public BigInteger getResetoptypeId() {
        return (BigInteger) get(19);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.CONFIRMOTHER</code>. Used for confirmation attributes; value of N means that user cannot set who confirmed action
     */
    public void setConfirmother(String value) {
        set(20, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.CONFIRMOTHER</code>. Used for confirmation attributes; value of N means that user cannot set who confirmed action
     */
    public String getConfirmother() {
        return (String) get(20);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.SETOTHEROPTYPE_ID</code>. Operation type tested when changing value of CONFIRM attribute to person other than logged-in user; NULL means same rules apply as for SETOPTYPE_ID
     */
    public void setSetotheroptypeId(BigInteger value) {
        set(21, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.SETOTHEROPTYPE_ID</code>. Operation type tested when changing value of CONFIRM attribute to person other than logged-in user; NULL means same rules apply as for SETOPTYPE_ID
     */
    public BigInteger getSetotheroptypeId() {
        return (BigInteger) get(21);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.MULTIVALUE</code>. Multivalue allowed; valid only for free attributes
     */
    public void setMultivalue(String value) {
        set(22, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.MULTIVALUE</code>. Multivalue allowed; valid only for free attributes
     */
    public String getMultivalue() {
        return (String) get(22);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.LOGALLOWED</code>. Logging/dictionary indexing is supported
     */
    public void setLogallowed(String value) {
        set(23, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.LOGALLOWED</code>. Logging/dictionary indexing is supported
     */
    public String getLogallowed() {
        return (String) get(23);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.LOGLEVEL</code>. Log level (N=none, C=current value, H=changes log(history))
     */
    public void setLoglevel(String value) {
        set(24, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.LOGLEVEL</code>. Log level (N=none, C=current value, H=changes log(history))
     */
    public String getLoglevel() {
        return (String) get(24);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.DICTTYPE</code>. Type of storage of attribute in dictionary
     */
    public void setDicttype(String value) {
        set(25, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.DICTTYPE</code>. Type of storage of attribute in dictionary
     */
    public String getDicttype() {
        return (String) get(25);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.DICTDEL1</code>. Terms delimiter
     */
    public void setDictdel1(String value) {
        set(26, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.DICTDEL1</code>. Terms delimiter
     */
    public String getDictdel1() {
        return (String) get(26);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.DICTDEL2</code>. Terms delimiter
     */
    public void setDictdel2(String value) {
        set(27, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.DICTDEL2</code>. Terms delimiter
     */
    public String getDictdel2() {
        return (String) get(27);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.TBCODE_CD</code>. Code used to evaluate attribute value (when used internally); for "X" and "O" atributes
     */
    public void setTbcodeCd(String value) {
        set(28, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.TBCODE_CD</code>. Code used to evaluate attribute value (when used internally); for "X" and "O" atributes
     */
    public String getTbcodeCd() {
        return (String) get(28);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.ACCOUNTRULE_NM</code>. Internal name of an accounting rule to be used to book the value for object (only for financial attributes)
     */
    public void setAccountruleNm(String value) {
        set(29, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ACCOUNTRULE_NM</code>. Internal name of an accounting rule to be used to book the value for object (only for financial attributes)
     */
    public String getAccountruleNm() {
        return (String) get(29);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.ACCDOCOBJECTFORMULA_ID</code>. Accounting document, created when changing value of this financial attribute will be connected to object, evaluated using this attribute. When left blank, document will be connected to object on which action was called (only for financial attributes)
     */
    public void setAccdocobjectformulaId(BigInteger value) {
        set(30, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ACCDOCOBJECTFORMULA_ID</code>. Accounting document, created when changing value of this financial attribute will be connected to object, evaluated using this attribute. When left blank, document will be connected to object on which action was called (only for financial attributes)
     */
    public BigInteger getAccdocobjectformulaId() {
        return (BigInteger) get(30);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.FROMOBJECTFORMULA_ID</code>. Used when value of financial attribute is changed - value of this attribute is object to be used on spent side of accounting record
     */
    public void setFromobjectformulaId(BigInteger value) {
        set(31, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.FROMOBJECTFORMULA_ID</code>. Used when value of financial attribute is changed - value of this attribute is object to be used on spent side of accounting record
     */
    public BigInteger getFromobjectformulaId() {
        return (BigInteger) get(31);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.TOOBJECTFORMULA_ID</code>. Used when value of financial attribute is changed - value of this attribute is object to be used on received side of accounting record
     */
    public void setToobjectformulaId(BigInteger value) {
        set(32, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.TOOBJECTFORMULA_ID</code>. Used when value of financial attribute is changed - value of this attribute is object to be used on received side of accounting record
     */
    public BigInteger getToobjectformulaId() {
        return (BigInteger) get(32);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.APPROXRECORD</code>. Indicates if the created accounting record will be approximate (only for financial attributes)
     */
    public void setApproxrecord(String value) {
        set(33, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.APPROXRECORD</code>. Indicates if the created accounting record will be approximate (only for financial attributes)
     */
    public String getApproxrecord() {
        return (String) get(33);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.VALUEACCOUNT_NM</code>. Short name of account to read actual value (only for financial attributes)
     */
    public void setValueaccountNm(String value) {
        set(34, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.VALUEACCOUNT_NM</code>. Short name of account to read actual value (only for financial attributes)
     */
    public String getValueaccountNm() {
        return (String) get(34);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.VALUEAMOUNTTYPE</code>. R(eceived), S(pent), T(otal) amount of the balance to read actual value (only for financial attributes)
     */
    public void setValueamounttype(String value) {
        set(35, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.VALUEAMOUNTTYPE</code>. R(eceived), S(pent), T(otal) amount of the balance to read actual value (only for financial attributes)
     */
    public String getValueamounttype() {
        return (String) get(35);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.DOCUMENTATION</code>. Addional documentation related to the attribute (not generated to the table column comment)
     */
    public void setDocumentation(String value) {
        set(36, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.DOCUMENTATION</code>. Addional documentation related to the attribute (not generated to the table column comment)
     */
    public String getDocumentation() {
        return (String) get(36);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.BITMAPORD</code>. Order in Attribute Set Bitmap, 0=Least Significant bit. Used internally in generated parts of PG packages (only for column attributes)
     */
    public void setBitmapord(Integer value) {
        set(37, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.BITMAPORD</code>. Order in Attribute Set Bitmap, 0=Least Significant bit. Used internally in generated parts of PG packages (only for column attributes)
     */
    public Integer getBitmapord() {
        return (Integer) get(37);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.X_ISFLAGDEPBIND</code>.
     */
    public void setXIsflagdepbind(String value) {
        set(38, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.X_ISFLAGDEPBIND</code>.
     */
    public String getXIsflagdepbind() {
        return (String) get(38);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.MANDATORY</code>. Marks mandatory attribute; only valid for columns (attribute type=C) and only affects way entity's PG package is generated.
     */
    public void setMandatory(String value) {
        set(39, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.MANDATORY</code>. Marks mandatory attribute; only valid for columns (attribute type=C) and only affects way entity's PG package is generated.
     */
    public String getMandatory() {
        return (String) get(39);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.ORDERED</code>. This column represents order (either globally or within children of one parent - see Ordering Group attribute).
     */
    public void setOrdered(String value) {
        set(40, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ORDERED</code>. This column represents order (either globally or within children of one parent - see Ordering Group attribute).
     */
    public String getOrdered() {
        return (String) get(40);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.ORDGROUP</code>. Parent attribute (or comma delimited list of parent attributes). Only used when ordered is set to Y - this column is then treated as ordering within group, made by same values of parent attributes
     */
    public void setOrdgroup(String value) {
        set(41, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ORDGROUP</code>. Parent attribute (or comma delimited list of parent attributes). Only used when ordered is set to Y - this column is then treated as ordering within group, made by same values of parent attributes
     */
    public String getOrdgroup() {
        return (String) get(41);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.DEFVALUE</code>. Default value. Only used in generator, should not be changed on installations and is only valid for C (column) attributes.
     */
    public void setDefvalue(String value) {
        set(42, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.DEFVALUE</code>. Default value. Only used in generator, should not be changed on installations and is only valid for C (column) attributes.
     */
    public String getDefvalue() {
        return (String) get(42);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.GENCOPY</code>. Generate mp_Copy_&lt;***&gt; procedure based on link, represented by this column, to PG package.
     */
    public void setGencopy(String value) {
        set(43, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.GENCOPY</code>. Generate mp_Copy_&lt;***&gt; procedure based on link, represented by this column, to PG package.
     */
    public String getGencopy() {
        return (String) get(43);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.GENMOVE</code>. Generate mp_Move_&lt;***&gt; procedure based on link, represented by this column, to PG package.
     */
    public void setGenmove(String value) {
        set(44, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.GENMOVE</code>. Generate mp_Move_&lt;***&gt; procedure based on link, represented by this column, to PG package.
     */
    public String getGenmove() {
        return (String) get(44);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.GENDELETE</code>. Generate mp_Delete_&lt;***&gt; procedure based on link, represented by this column, to PG package.
     */
    public void setGendelete(String value) {
        set(45, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.GENDELETE</code>. Generate mp_Delete_&lt;***&gt; procedure based on link, represented by this column, to PG package.
     */
    public String getGendelete() {
        return (String) get(45);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.TEXTSRC_ID</code>. Source attribute for translated attribute (only for translated attributes)
     */
    public void setTextsrcId(BigInteger value) {
        set(46, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.TEXTSRC_ID</code>. Source attribute for translated attribute (only for translated attributes)
     */
    public BigInteger getTextsrcId() {
        return (BigInteger) get(46);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.X_ISFLAGDEFATTR</code>. Shows if Attribute is used in any Flag Definition (via. FlagDefAttr, or DstAttr of any FlagDep)
     */
    public void setXIsflagdefattr(String value) {
        set(47, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.X_ISFLAGDEFATTR</code>. Shows if Attribute is used in any Flag Definition (via. FlagDefAttr, or DstAttr of any FlagDep)
     */
    public String getXIsflagdefattr() {
        return (String) get(47);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.COPIED</code>. Attribute value is copied in copy operations.
     */
    public void setCopied(String value) {
        set(48, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.COPIED</code>. Attribute value is copied in copy operations.
     */
    public String getCopied() {
        return (String) get(48);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.HIERARCHICAL</code>.
     */
    public void setHierarchical(String value) {
        set(49, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.HIERARCHICAL</code>.
     */
    public String getHierarchical() {
        return (String) get(49);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.VALIDATED</code>. Specifies if validation is supported for given attribute. Is used by client to determine if editation in validate edit should be allowed when this attribute is used as format, or if seelction through LOV is required.
     */
    public void setValidated(String value) {
        set(50, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.VALIDATED</code>. Specifies if validation is supported for given attribute. Is used by client to determine if editation in validate edit should be allowed when this attribute is used as format, or if seelction through LOV is required.
     */
    public String getValidated() {
        return (String) get(50);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.MULTICREATE</code>. Create function accepts multiline in this attribute. Only valid for (C)olumn type attributes with domains UID and REF
     */
    public void setMulticreate(String value) {
        set(51, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.MULTICREATE</code>. Create function accepts multiline in this attribute. Only valid for (C)olumn type attributes with domains UID and REF
     */
    public String getMulticreate() {
        return (String) get(51);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.DEFOWNER</code>. Default owner points to unit that acts as owner of given object for purpose of accounting
     */
    public void setDefowner(String value) {
        set(52, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.DEFOWNER</code>. Default owner points to unit that acts as owner of given object for purpose of accounting
     */
    public String getDefowner() {
        return (String) get(52);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.OWNERFORMULA_ID</code>. Owner of ledger used to evaluate value of financial attribute.
     */
    public void setOwnerformulaId(BigInteger value) {
        set(53, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.OWNERFORMULA_ID</code>. Owner of ledger used to evaluate value of financial attribute.
     */
    public BigInteger getOwnerformulaId() {
        return (BigInteger) get(53);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.ISINTABLE</code>. Attribute is implemented in table of this Entity
     */
    public void setIsintable(String value) {
        set(54, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ISINTABLE</code>. Attribute is implemented in table of this Entity
     */
    public String getIsintable() {
        return (String) get(54);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.ISOWN</code>. Attribute is not inherited
     */
    public void setIsown(String value) {
        set(55, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.ISOWN</code>. Attribute is not inherited
     */
    public String getIsown() {
        return (String) get(55);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.KEYORD</code>. Order of given attribute in key of given entity
     */
    public void setKeyord(Integer value) {
        set(56, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.KEYORD</code>. Order of given attribute in key of given entity
     */
    public Integer getKeyord() {
        return (Integer) get(56);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.OPTYPETYPE_RF</code>. Specifies type of operation for UID / operation type attributes that support automatic optype creation
     */
    public void setOptypetypeRf(BigInteger value) {
        set(57, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.OPTYPETYPE_RF</code>. Specifies type of operation for UID / operation type attributes that support automatic optype creation
     */
    public BigInteger getOptypetypeRf() {
        return (BigInteger) get(57);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.IMGSRC_ID</code>. Reference to the image souce, which we should resize
     */
    public void setImgsrcId(BigInteger value) {
        set(58, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.IMGSRC_ID</code>. Reference to the image souce, which we should resize
     */
    public BigInteger getImgsrcId() {
        return (BigInteger) get(58);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.IMGWIDTH</code>. The width of the picture to resize
     */
    public void setImgwidth(Integer value) {
        set(59, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.IMGWIDTH</code>. The width of the picture to resize
     */
    public Integer getImgwidth() {
        return (Integer) get(59);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.IMGHEIGHT</code>. The height of the picture to resize
     */
    public void setImgheight(Integer value) {
        set(60, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.IMGHEIGHT</code>. The height of the picture to resize
     */
    public Integer getImgheight() {
        return (Integer) get(60);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.FILESERVER_ID</code>. [KO150414-21B7CDA] Ukladani souboru mimo databazi
     */
    public void setFileserverId(BigInteger value) {
        set(61, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.FILESERVER_ID</code>. [KO150414-21B7CDA] Ukladani souboru mimo databazi
     */
    public BigInteger getFileserverId() {
        return (BigInteger) get(61);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.GENMIGR</code>. Used for generator of migration framework
     */
    public void setGenmigr(String value) {
        set(62, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.GENMIGR</code>. Used for generator of migration framework
     */
    public String getGenmigr() {
        return (String) get(62);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.EVALCVALUE</code>. Evaluate and store text from binary document. Text representation can be used in fulltext searches - thus, it should be enabled for properties, that are included in fulltext search flagdef. Is always empty for domains other than BLOB
     */
    public void setEvalcvalue(String value) {
        set(63, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.EVALCVALUE</code>. Evaluate and store text from binary document. Text representation can be used in fulltext searches - thus, it should be enabled for properties, that are included in fulltext search flagdef. Is always empty for domains other than BLOB
     */
    public String getEvalcvalue() {
        return (String) get(63);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.OPTLOBLIMIT</code>. Optional limit for length of lob free atribut. It show alert.  The limit  is in bytes
     */
    public void setOptloblimit(BigDecimal value) {
        set(64, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.OPTLOBLIMIT</code>. Optional limit for length of lob free atribut. It show alert.  The limit  is in bytes
     */
    public BigDecimal getOptloblimit() {
        return (BigDecimal) get(64);
    }

    /**
     * Setter for <code>KER.KER_ATTR_TB.MANLOBLIMIT</code>. Mandatory limit for length of lob free atribute. It show error. The limit is in bytes.
     */
    public void setManloblimit(BigDecimal value) {
        set(65, value);
    }

    /**
     * Getter for <code>KER.KER_ATTR_TB.MANLOBLIMIT</code>. Mandatory limit for length of lob free atribute. It show error. The limit is in bytes.
     */
    public BigDecimal getManloblimit() {
        return (BigDecimal) get(65);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<BigInteger> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached KerAttrTbRecord
     */
    public KerAttrTbRecord() {
        super(KerAttrTb.KER_ATTR_TB);
    }

    /**
     * Create a detached, initialised KerAttrTbRecord
     */
    public KerAttrTbRecord(BigInteger attrId, BigInteger entityId, String nameNm, String name, String note, String attrtype, String iscustom, String isused, BigInteger attrgrpId, Integer ord, BigInteger domainId, String subdomainNm, String qvisible, Integer llength, String indexed, String upnameNm, String readonly, BigInteger getoptypeId, BigInteger setoptypeId, BigInteger resetoptypeId, String confirmother, BigInteger setotheroptypeId, String multivalue, String logallowed, String loglevel, String dicttype, String dictdel1, String dictdel2, String tbcodeCd, String accountruleNm, BigInteger accdocobjectformulaId, BigInteger fromobjectformulaId, BigInteger toobjectformulaId, String approxrecord, String valueaccountNm, String valueamounttype, String documentation, Integer bitmapord, String xIsflagdepbind, String mandatory, String ordered, String ordgroup, String defvalue, String gencopy, String genmove, String gendelete, BigInteger textsrcId, String xIsflagdefattr, String copied, String hierarchical, String validated, String multicreate, String defowner, BigInteger ownerformulaId, String isintable, String isown, Integer keyord, BigInteger optypetypeRf, BigInteger imgsrcId, Integer imgwidth, Integer imgheight, BigInteger fileserverId, String genmigr, String evalcvalue, BigDecimal optloblimit, BigDecimal manloblimit) {
        super(KerAttrTb.KER_ATTR_TB);

        set(0, attrId);
        set(1, entityId);
        set(2, nameNm);
        set(3, name);
        set(4, note);
        set(5, attrtype);
        set(6, iscustom);
        set(7, isused);
        set(8, attrgrpId);
        set(9, ord);
        set(10, domainId);
        set(11, subdomainNm);
        set(12, qvisible);
        set(13, llength);
        set(14, indexed);
        set(15, upnameNm);
        set(16, readonly);
        set(17, getoptypeId);
        set(18, setoptypeId);
        set(19, resetoptypeId);
        set(20, confirmother);
        set(21, setotheroptypeId);
        set(22, multivalue);
        set(23, logallowed);
        set(24, loglevel);
        set(25, dicttype);
        set(26, dictdel1);
        set(27, dictdel2);
        set(28, tbcodeCd);
        set(29, accountruleNm);
        set(30, accdocobjectformulaId);
        set(31, fromobjectformulaId);
        set(32, toobjectformulaId);
        set(33, approxrecord);
        set(34, valueaccountNm);
        set(35, valueamounttype);
        set(36, documentation);
        set(37, bitmapord);
        set(38, xIsflagdepbind);
        set(39, mandatory);
        set(40, ordered);
        set(41, ordgroup);
        set(42, defvalue);
        set(43, gencopy);
        set(44, genmove);
        set(45, gendelete);
        set(46, textsrcId);
        set(47, xIsflagdefattr);
        set(48, copied);
        set(49, hierarchical);
        set(50, validated);
        set(51, multicreate);
        set(52, defowner);
        set(53, ownerformulaId);
        set(54, isintable);
        set(55, isown);
        set(56, keyord);
        set(57, optypetypeRf);
        set(58, imgsrcId);
        set(59, imgwidth);
        set(60, imgheight);
        set(61, fileserverId);
        set(62, genmigr);
        set(63, evalcvalue);
        set(64, optloblimit);
        set(65, manloblimit);
    }
}
