/*
 * This file is generated by jOOQ.
 */
package com.provys.ealoader.ea.db.tables;


import com.provys.ealoader.ea.db.Indexes;
import com.provys.ealoader.ea.db.Ker;
import com.provys.ealoader.ea.db.Keys;
import com.provys.ealoader.ea.db.tables.records.TAttributeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TAttribute extends TableImpl<TAttributeRecord> {

    private static final long serialVersionUID = 892201780;

    /**
     * The reference instance of <code>KER.T_ATTRIBUTE</code>
     */
    public static final TAttribute T_ATTRIBUTE = new TAttribute();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TAttributeRecord> getRecordType() {
        return TAttributeRecord.class;
    }

    /**
     * The column <code>KER.T_ATTRIBUTE.OBJECT_ID</code>.
     */
    public final TableField<TAttributeRecord, Long> OBJECT_ID = createField("OBJECT_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0  ", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.NAME</code>.
     */
    public final TableField<TAttributeRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.SCOPE</code>.
     */
    public final TableField<TAttributeRecord, String> SCOPE = createField("SCOPE", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.STEREOTYPE</code>.
     */
    public final TableField<TAttributeRecord, String> STEREOTYPE = createField("STEREOTYPE", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.CONTAINMENT</code>.
     */
    public final TableField<TAttributeRecord, String> CONTAINMENT = createField("CONTAINMENT", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.ISSTATIC</code>.
     */
    public final TableField<TAttributeRecord, Long> ISSTATIC = createField("ISSTATIC", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.ISCOLLECTION</code>.
     */
    public final TableField<TAttributeRecord, Long> ISCOLLECTION = createField("ISCOLLECTION", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.ISORDERED</code>.
     */
    public final TableField<TAttributeRecord, Long> ISORDERED = createField("ISORDERED", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.ALLOWDUPLICATES</code>.
     */
    public final TableField<TAttributeRecord, Long> ALLOWDUPLICATES = createField("ALLOWDUPLICATES", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.LOWERBOUND</code>.
     */
    public final TableField<TAttributeRecord, String> LOWERBOUND = createField("LOWERBOUND", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.UPPERBOUND</code>.
     */
    public final TableField<TAttributeRecord, String> UPPERBOUND = createField("UPPERBOUND", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.CONTAINER</code>.
     */
    public final TableField<TAttributeRecord, String> CONTAINER = createField("CONTAINER", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.NOTES</code>.
     */
    public final TableField<TAttributeRecord, String> NOTES = createField("NOTES", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.DERIVED</code>.
     */
    public final TableField<TAttributeRecord, String> DERIVED = createField("DERIVED", org.jooq.impl.SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.ID</code>.
     */
    public final TableField<TAttributeRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.POS</code>.
     */
    public final TableField<TAttributeRecord, Long> POS = createField("POS", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.GENOPTION</code>.
     */
    public final TableField<TAttributeRecord, String> GENOPTION = createField("GENOPTION", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.LENGTH</code>.
     */
    public final TableField<TAttributeRecord, Long> LENGTH = createField("LENGTH", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.PRECISION</code>.
     */
    public final TableField<TAttributeRecord, Long> PRECISION = createField("PRECISION", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.SCALE</code>.
     */
    public final TableField<TAttributeRecord, Long> SCALE = createField("SCALE", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.CONST</code>.
     */
    public final TableField<TAttributeRecord, Long> CONST = createField("CONST", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.STYLE</code>.
     */
    public final TableField<TAttributeRecord, String> STYLE = createField("STYLE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.CLASSIFIER</code>.
     */
    public final TableField<TAttributeRecord, String> CLASSIFIER = createField("CLASSIFIER", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.Default</code>.
     */
    public final TableField<TAttributeRecord, String> DEFAULT = createField("Default", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.TYPE</code>.
     */
    public final TableField<TAttributeRecord, String> TYPE = createField("TYPE", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.EA_GUID</code>.
     */
    public final TableField<TAttributeRecord, String> EA_GUID = createField("EA_GUID", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>KER.T_ATTRIBUTE.STYLEEX</code>.
     */
    public final TableField<TAttributeRecord, String> STYLEEX = createField("STYLEEX", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>KER.T_ATTRIBUTE</code> table reference
     */
    public TAttribute() {
        this(DSL.name("T_ATTRIBUTE"), null);
    }

    /**
     * Create an aliased <code>KER.T_ATTRIBUTE</code> table reference
     */
    public TAttribute(String alias) {
        this(DSL.name(alias), T_ATTRIBUTE);
    }

    /**
     * Create an aliased <code>KER.T_ATTRIBUTE</code> table reference
     */
    public TAttribute(Name alias) {
        this(alias, T_ATTRIBUTE);
    }

    private TAttribute(Name alias, Table<TAttributeRecord> aliased) {
        this(alias, aliased, null);
    }

    private TAttribute(Name alias, Table<TAttributeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TAttribute(Table<O> child, ForeignKey<O, TAttributeRecord> key) {
        super(child, key, T_ATTRIBUTE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Ker.KER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.IX_ATTRIBUTE_CLASSIFIER, Indexes.IX_ATTRIBUTE_NAME, Indexes.IX_ATTRIBUTE_OBJECTID, Indexes.IX_ATTRIBUTE_TYPE, Indexes.PK_ATTRIBUTE, Indexes.UQ_ATTRIBUTE_EAGUID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TAttributeRecord> getPrimaryKey() {
        return Keys.PK_ATTRIBUTE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TAttributeRecord>> getKeys() {
        return Arrays.<UniqueKey<TAttributeRecord>>asList(Keys.PK_ATTRIBUTE, Keys.UQ_ATTRIBUTE_EAGUID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TAttribute as(String alias) {
        return new TAttribute(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TAttribute as(Name alias) {
        return new TAttribute(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TAttribute rename(String name) {
        return new TAttribute(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TAttribute rename(Name name) {
        return new TAttribute(name, null);
    }
}
