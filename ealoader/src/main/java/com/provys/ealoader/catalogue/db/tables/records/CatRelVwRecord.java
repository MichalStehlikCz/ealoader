/*
 * This file is generated by jOOQ.
 */
package com.provys.ealoader.catalogue.db.tables.records;


import com.provys.ealoader.catalogue.db.tables.CatRelVw;

import java.math.BigInteger;

import javax.annotation.Generated;

import org.jooq.impl.TableRecordImpl;


/**
 * Generated view for entity REL
 * Relations (catalogue)
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CatRelVwRecord extends TableRecordImpl<CatRelVwRecord> {

    private static final long serialVersionUID = -762758424;

    /**
     * Setter for <code>CAT.CAT_REL_VW.REL_ID</code>. UID
     */
    public void setRelId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.REL_ID</code>. UID
     */
    public Long getRelId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.RELTYPE</code>. Relation type (S=simple, M=MN-relation implemented through table, F=free)
     */
    public void setReltype(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.RELTYPE</code>. Relation type (S=simple, M=MN-relation implemented through table, F=free)
     */
    public String getReltype() {
        return (String) get(1);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.NAME_NM</code>. Internal name (identification) of relation
     */
    public void setNameNm(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.NAME_NM</code>. Internal name (identification) of relation
     */
    public String getNameNm() {
        return (String) get(2);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.ISCUSTOM</code>. Relation is custom for actual installation
     */
    public void setIscustom(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.ISCUSTOM</code>. Relation is custom for actual installation
     */
    public String getIscustom() {
        return (String) get(3);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.NAME</code>. Name of relation as entity -&gt; name -&gt; toentity (used in develop lang)
     */
    public void setName(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.NAME</code>. Name of relation as entity -&gt; name -&gt; toentity (used in develop lang)
     */
    public String getName() {
        return (String) get(4);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.TONAME</code>. Name of relation as toentity -&gt; name -&gt; entity (used in develop lang)
     */
    public void setToname(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.TONAME</code>. Name of relation as toentity -&gt; name -&gt; entity (used in develop lang)
     */
    public String getToname() {
        return (String) get(5);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.ENTITY_ID</code>. UID of entity relation belongs to (entity with resulting UIDs)
     */
    public void setEntityId(BigInteger value) {
        set(6, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.ENTITY_ID</code>. UID of entity relation belongs to (entity with resulting UIDs)
     */
    public BigInteger getEntityId() {
        return (BigInteger) get(6);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.TOENTITY_ID</code>. UID of entity queried (entity with source UIDs)
     */
    public void setToentityId(BigInteger value) {
        set(7, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.TOENTITY_ID</code>. UID of entity queried (entity with source UIDs)
     */
    public BigInteger getToentityId() {
        return (BigInteger) get(7);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.COLUMN_NM</code>. Name of column in entity's table_nm
     */
    public void setColumnNm(String value) {
        set(8, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.COLUMN_NM</code>. Name of column in entity's table_nm
     */
    public String getColumnNm() {
        return (String) get(8);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.TOCOLUMN_NM</code>. Name of column in toentity's table_nm
     */
    public void setTocolumnNm(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.TOCOLUMN_NM</code>. Name of column in toentity's table_nm
     */
    public String getTocolumnNm() {
        return (String) get(9);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.MNTABLE_NM</code>. Name of MN-decomposition view / table (for internal access)
     */
    public void setMntableNm(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.MNTABLE_NM</code>. Name of MN-decomposition view / table (for internal access)
     */
    public String getMntableNm() {
        return (String) get(10);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.MNVIEW_NM</code>. Name of MN-decomposition view / table (for client)
     */
    public void setMnviewNm(String value) {
        set(11, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.MNVIEW_NM</code>. Name of MN-decomposition view / table (for client)
     */
    public String getMnviewNm() {
        return (String) get(11);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.MNCOLUMN_NM</code>. Name of column in MN-decomposition view, coresponding to entity
     */
    public void setMncolumnNm(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.MNCOLUMN_NM</code>. Name of column in MN-decomposition view, coresponding to entity
     */
    public String getMncolumnNm() {
        return (String) get(12);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.MNTOCOLUMN_NM</code>. Name of column in MN-decomposition view, coresponding to toentity
     */
    public void setMntocolumnNm(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.MNTOCOLUMN_NM</code>. Name of column in MN-decomposition view, coresponding to toentity
     */
    public String getMntocolumnNm() {
        return (String) get(13);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.FK</code>. If column_nm is key_nm (in table_nm for entity), this flag identifies if UIDs in tocolumn are to be checked for type by selecting from entity's table_nm
     */
    public void setFk(String value) {
        set(14, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.FK</code>. If column_nm is key_nm (in table_nm for entity), this flag identifies if UIDs in tocolumn are to be checked for type by selecting from entity's table_nm
     */
    public String getFk() {
        return (String) get(14);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.TBINFREECOND_CD</code>. Template for IN-variant of condition (for internal access)
     */
    public void setTbinfreecondCd(String value) {
        set(15, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.TBINFREECOND_CD</code>. Template for IN-variant of condition (for internal access)
     */
    public String getTbinfreecondCd() {
        return (String) get(15);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.TBEXFREECOND_CD</code>. Template for EXISTS variant of condition (for internal access)
     */
    public void setTbexfreecondCd(String value) {
        set(16, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.TBEXFREECOND_CD</code>. Template for EXISTS variant of condition (for internal access)
     */
    public String getTbexfreecondCd() {
        return (String) get(16);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.VWINFREECOND_CD</code>. Template for IN-variant of condition (for client)
     */
    public void setVwinfreecondCd(String value) {
        set(17, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.VWINFREECOND_CD</code>. Template for IN-variant of condition (for client)
     */
    public String getVwinfreecondCd() {
        return (String) get(17);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.VWEXFREECOND_CD</code>. Template for EXISTS variant of condition (for client)
     */
    public void setVwexfreecondCd(String value) {
        set(18, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.VWEXFREECOND_CD</code>. Template for EXISTS variant of condition (for client)
     */
    public String getVwexfreecondCd() {
        return (String) get(18);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.RECURSIVE</code>. NULL - not recursive; T - transitive closure; R - transitive and recursive closure; meaningful only for simple SELF to SELF relations
     */
    public void setRecursive(String value) {
        set(19, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.RECURSIVE</code>. NULL - not recursive; T - transitive closure; R - transitive and recursive closure; meaningful only for simple SELF to SELF relations
     */
    public String getRecursive() {
        return (String) get(19);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.CASCXMLEXPORT</code>. Defines how is relation supported in XML exports - N value means no support, Y - included by default, NULL - supported but not included by default. If relation is marked as supported, it means that source objects are / can be included in target entitys XML file.
     */
    public void setCascxmlexport(String value) {
        set(20, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.CASCXMLEXPORT</code>. Defines how is relation supported in XML exports - N value means no support, Y - included by default, NULL - supported but not included by default. If relation is marked as supported, it means that source objects are / can be included in target entitys XML file.
     */
    public String getCascxmlexport() {
        return (String) get(20);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.ATTREQUIVALENCE</code>. Defines, that some attributes have the same value on both sides of the relation. It is utilized by XML exports/imports.
The form is e.g:  A=B;C;D.E=F
  when the ralation is from entity E1 to entity E2, that means:
    E1.A has the same value as E2.B
    E1.C has the same value as E2.C
    when E1.D is foreign key to entity with composite natural key, it means that
      component E of the key has the same value as E2.F.
      Warning: something like G=H.K is NOT allowed.
     */
    public void setAttrequivalence(String value) {
        set(21, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.ATTREQUIVALENCE</code>. Defines, that some attributes have the same value on both sides of the relation. It is utilized by XML exports/imports.
The form is e.g:  A=B;C;D.E=F
  when the ralation is from entity E1 to entity E2, that means:
    E1.A has the same value as E2.B
    E1.C has the same value as E2.C
    when E1.D is foreign key to entity with composite natural key, it means that
      component E of the key has the same value as E2.F.
      Warning: something like G=H.K is NOT allowed.
     */
    public String getAttrequivalence() {
        return (String) get(21);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.NLSNAME</code>.
     */
    public void setNlsname(String value) {
        set(22, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.NLSNAME</code>.
     */
    public String getNlsname() {
        return (String) get(22);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.NLSTONAME</code>.
     */
    public void setNlstoname(String value) {
        set(23, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.NLSTONAME</code>.
     */
    public String getNlstoname() {
        return (String) get(23);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.C_DESC</code>. Used to display relation in direction from source entity; contains name of relation and target entity.
     */
    public void setCDesc(String value) {
        set(24, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.C_DESC</code>. Used to display relation in direction from source entity; contains name of relation and target entity.
     */
    public String getCDesc() {
        return (String) get(24);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.C_DESC_ADMIN</code>. Description used by administrators in client configuration
     */
    public void setCDescAdmin(String value) {
        set(25, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.C_DESC_ADMIN</code>. Description used by administrators in client configuration
     */
    public String getCDescAdmin() {
        return (String) get(25);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.C_ENTITY_NM</code>.
     */
    public void setCEntityNm(String value) {
        set(26, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.C_ENTITY_NM</code>.
     */
    public String getCEntityNm() {
        return (String) get(26);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.C_LIST</code>. Relation is usable for XML lists; profile dependent setting
     */
    public void setCList(String value) {
        set(27, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.C_LIST</code>. Relation is usable for XML lists; profile dependent setting
     */
    public String getCList() {
        return (String) get(27);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.C_NLSDESC</code>. Used to display relation in direction from source entity; contains translated name of relation and target entity.
     */
    public void setCNlsdesc(String value) {
        set(28, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.C_NLSDESC</code>. Used to display relation in direction from source entity; contains translated name of relation and target entity.
     */
    public String getCNlsdesc() {
        return (String) get(28);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.C_NLSTODESC</code>. Used to display relation in direction from target entity; contains translated name (target) of relation and tranlated name of source entity.
     */
    public void setCNlstodesc(String value) {
        set(29, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.C_NLSTODESC</code>. Used to display relation in direction from target entity; contains translated name (target) of relation and tranlated name of source entity.
     */
    public String getCNlstodesc() {
        return (String) get(29);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.C_QUERY</code>. Relation is usable from query; profile dependent setting
     */
    public void setCQuery(String value) {
        set(30, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.C_QUERY</code>. Relation is usable from query; profile dependent setting
     */
    public String getCQuery() {
        return (String) get(30);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.C_TODESC</code>. Used to display relation in direction from target entity; contains (reverse) name of relation and name of source entity.
     */
    public void setCTodesc(String value) {
        set(31, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.C_TODESC</code>. Used to display relation in direction from target entity; contains (reverse) name of relation and name of source entity.
     */
    public String getCTodesc() {
        return (String) get(31);
    }

    /**
     * Setter for <code>CAT.CAT_REL_VW.C_TOENTITY_NM</code>.
     */
    public void setCToentityNm(String value) {
        set(32, value);
    }

    /**
     * Getter for <code>CAT.CAT_REL_VW.C_TOENTITY_NM</code>.
     */
    public String getCToentityNm() {
        return (String) get(32);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CatRelVwRecord
     */
    public CatRelVwRecord() {
        super(CatRelVw.CAT_REL_VW);
    }

    /**
     * Create a detached, initialised CatRelVwRecord
     */
    public CatRelVwRecord(Long relId, String reltype, String nameNm, String iscustom, String name, String toname, BigInteger entityId, BigInteger toentityId, String columnNm, String tocolumnNm, String mntableNm, String mnviewNm, String mncolumnNm, String mntocolumnNm, String fk, String tbinfreecondCd, String tbexfreecondCd, String vwinfreecondCd, String vwexfreecondCd, String recursive, String cascxmlexport, String attrequivalence, String nlsname, String nlstoname, String cDesc, String cDescAdmin, String cEntityNm, String cList, String cNlsdesc, String cNlstodesc, String cQuery, String cTodesc, String cToentityNm) {
        super(CatRelVw.CAT_REL_VW);

        set(0, relId);
        set(1, reltype);
        set(2, nameNm);
        set(3, iscustom);
        set(4, name);
        set(5, toname);
        set(6, entityId);
        set(7, toentityId);
        set(8, columnNm);
        set(9, tocolumnNm);
        set(10, mntableNm);
        set(11, mnviewNm);
        set(12, mncolumnNm);
        set(13, mntocolumnNm);
        set(14, fk);
        set(15, tbinfreecondCd);
        set(16, tbexfreecondCd);
        set(17, vwinfreecondCd);
        set(18, vwexfreecondCd);
        set(19, recursive);
        set(20, cascxmlexport);
        set(21, attrequivalence);
        set(22, nlsname);
        set(23, nlstoname);
        set(24, cDesc);
        set(25, cDescAdmin);
        set(26, cEntityNm);
        set(27, cList);
        set(28, cNlsdesc);
        set(29, cNlstodesc);
        set(30, cQuery);
        set(31, cTodesc);
        set(32, cToentityNm);
    }
}
