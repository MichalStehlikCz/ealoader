/*
 * This file is generated by jOOQ.
 */
package com.provys.ealoader.catalogue.db.tables;


import com.provys.ealoader.catalogue.db.Cat;
import com.provys.ealoader.catalogue.db.tables.records.CatRelVwRecord;

import java.math.BigInteger;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Generated view for entity REL
 * Relations (catalogue)
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CatRelVw extends TableImpl<CatRelVwRecord> {

    private static final long serialVersionUID = 1334840178;

    /**
     * The reference instance of <code>CAT.CAT_REL_VW</code>
     */
    public static final CatRelVw CAT_REL_VW = new CatRelVw();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CatRelVwRecord> getRecordType() {
        return CatRelVwRecord.class;
    }

    /**
     * The column <code>CAT.CAT_REL_VW.REL_ID</code>. UID
     */
    public final TableField<CatRelVwRecord, Long> REL_ID = createField("REL_ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "UID");

    /**
     * The column <code>CAT.CAT_REL_VW.RELTYPE</code>. Relation type (S=simple, M=MN-relation implemented through table, F=free)
     */
    public final TableField<CatRelVwRecord, String> RELTYPE = createField("RELTYPE", org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "Relation type (S=simple, M=MN-relation implemented through table, F=free)");

    /**
     * The column <code>CAT.CAT_REL_VW.NAME_NM</code>. Internal name (identification) of relation
     */
    public final TableField<CatRelVwRecord, String> NAME_NM = createField("NAME_NM", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "Internal name (identification) of relation");

    /**
     * The column <code>CAT.CAT_REL_VW.ISCUSTOM</code>. Relation is custom for actual installation
     */
    public final TableField<CatRelVwRecord, String> ISCUSTOM = createField("ISCUSTOM", org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "Relation is custom for actual installation");

    /**
     * The column <code>CAT.CAT_REL_VW.NAME</code>. Name of relation as entity -&gt; name -&gt; toentity (used in develop lang)
     */
    public final TableField<CatRelVwRecord, String> NAME = createField("NAME", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "Name of relation as entity -> name -> toentity (used in develop lang)");

    /**
     * The column <code>CAT.CAT_REL_VW.TONAME</code>. Name of relation as toentity -&gt; name -&gt; entity (used in develop lang)
     */
    public final TableField<CatRelVwRecord, String> TONAME = createField("TONAME", org.jooq.impl.SQLDataType.VARCHAR(200), this, "Name of relation as toentity -> name -> entity (used in develop lang)");

    /**
     * The column <code>CAT.CAT_REL_VW.ENTITY_ID</code>. UID of entity relation belongs to (entity with resulting UIDs)
     */
    public final TableField<CatRelVwRecord, BigInteger> ENTITY_ID = createField("ENTITY_ID", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38).nullable(false), this, "UID of entity relation belongs to (entity with resulting UIDs)");

    /**
     * The column <code>CAT.CAT_REL_VW.TOENTITY_ID</code>. UID of entity queried (entity with source UIDs)
     */
    public final TableField<CatRelVwRecord, BigInteger> TOENTITY_ID = createField("TOENTITY_ID", org.jooq.impl.SQLDataType.DECIMAL_INTEGER.precision(38), this, "UID of entity queried (entity with source UIDs)");

    /**
     * The column <code>CAT.CAT_REL_VW.COLUMN_NM</code>. Name of column in entity's table_nm
     */
    public final TableField<CatRelVwRecord, String> COLUMN_NM = createField("COLUMN_NM", org.jooq.impl.SQLDataType.VARCHAR(60), this, "Name of column in entity's table_nm");

    /**
     * The column <code>CAT.CAT_REL_VW.TOCOLUMN_NM</code>. Name of column in toentity's table_nm
     */
    public final TableField<CatRelVwRecord, String> TOCOLUMN_NM = createField("TOCOLUMN_NM", org.jooq.impl.SQLDataType.VARCHAR(60), this, "Name of column in toentity's table_nm");

    /**
     * The column <code>CAT.CAT_REL_VW.MNTABLE_NM</code>. Name of MN-decomposition view / table (for internal access)
     */
    public final TableField<CatRelVwRecord, String> MNTABLE_NM = createField("MNTABLE_NM", org.jooq.impl.SQLDataType.VARCHAR(60), this, "Name of MN-decomposition view / table (for internal access)");

    /**
     * The column <code>CAT.CAT_REL_VW.MNVIEW_NM</code>. Name of MN-decomposition view / table (for client)
     */
    public final TableField<CatRelVwRecord, String> MNVIEW_NM = createField("MNVIEW_NM", org.jooq.impl.SQLDataType.VARCHAR(60), this, "Name of MN-decomposition view / table (for client)");

    /**
     * The column <code>CAT.CAT_REL_VW.MNCOLUMN_NM</code>. Name of column in MN-decomposition view, coresponding to entity
     */
    public final TableField<CatRelVwRecord, String> MNCOLUMN_NM = createField("MNCOLUMN_NM", org.jooq.impl.SQLDataType.VARCHAR(60), this, "Name of column in MN-decomposition view, coresponding to entity");

    /**
     * The column <code>CAT.CAT_REL_VW.MNTOCOLUMN_NM</code>. Name of column in MN-decomposition view, coresponding to toentity
     */
    public final TableField<CatRelVwRecord, String> MNTOCOLUMN_NM = createField("MNTOCOLUMN_NM", org.jooq.impl.SQLDataType.VARCHAR(60), this, "Name of column in MN-decomposition view, coresponding to toentity");

    /**
     * The column <code>CAT.CAT_REL_VW.FK</code>. If column_nm is key_nm (in table_nm for entity), this flag identifies if UIDs in tocolumn are to be checked for type by selecting from entity's table_nm
     */
    public final TableField<CatRelVwRecord, String> FK = createField("FK", org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "If column_nm is key_nm (in table_nm for entity), this flag identifies if UIDs in tocolumn are to be checked for type by selecting from entity's table_nm");

    /**
     * The column <code>CAT.CAT_REL_VW.TBINFREECOND_CD</code>. Template for IN-variant of condition (for internal access)
     */
    public final TableField<CatRelVwRecord, String> TBINFREECOND_CD = createField("TBINFREECOND_CD", org.jooq.impl.SQLDataType.VARCHAR(4000), this, "Template for IN-variant of condition (for internal access)");

    /**
     * The column <code>CAT.CAT_REL_VW.TBEXFREECOND_CD</code>. Template for EXISTS variant of condition (for internal access)
     */
    public final TableField<CatRelVwRecord, String> TBEXFREECOND_CD = createField("TBEXFREECOND_CD", org.jooq.impl.SQLDataType.VARCHAR(4000), this, "Template for EXISTS variant of condition (for internal access)");

    /**
     * The column <code>CAT.CAT_REL_VW.VWINFREECOND_CD</code>. Template for IN-variant of condition (for client)
     */
    public final TableField<CatRelVwRecord, String> VWINFREECOND_CD = createField("VWINFREECOND_CD", org.jooq.impl.SQLDataType.VARCHAR(4000), this, "Template for IN-variant of condition (for client)");

    /**
     * The column <code>CAT.CAT_REL_VW.VWEXFREECOND_CD</code>. Template for EXISTS variant of condition (for client)
     */
    public final TableField<CatRelVwRecord, String> VWEXFREECOND_CD = createField("VWEXFREECOND_CD", org.jooq.impl.SQLDataType.VARCHAR(4000), this, "Template for EXISTS variant of condition (for client)");

    /**
     * The column <code>CAT.CAT_REL_VW.RECURSIVE</code>. NULL - not recursive; T - transitive closure; R - transitive and recursive closure; meaningful only for simple SELF to SELF relations
     */
    public final TableField<CatRelVwRecord, String> RECURSIVE = createField("RECURSIVE", org.jooq.impl.SQLDataType.CHAR(1), this, "NULL - not recursive; T - transitive closure; R - transitive and recursive closure; meaningful only for simple SELF to SELF relations");

    /**
     * The column <code>CAT.CAT_REL_VW.CASCXMLEXPORT</code>. Defines how is relation supported in XML exports - N value means no support, Y - included by default, NULL - supported but not included by default. If relation is marked as supported, it means that source objects are / can be included in target entitys XML file.
     */
    public final TableField<CatRelVwRecord, String> CASCXMLEXPORT = createField("CASCXMLEXPORT", org.jooq.impl.SQLDataType.CHAR(1), this, "Defines how is relation supported in XML exports - N value means no support, Y - included by default, NULL - supported but not included by default. If relation is marked as supported, it means that source objects are / can be included in target entitys XML file.");

    /**
     * The column <code>CAT.CAT_REL_VW.ATTREQUIVALENCE</code>. Defines, that some attributes have the same value on both sides of the relation. It is utilized by XML exports/imports.
The form is e.g:  A=B;C;D.E=F
  when the ralation is from entity E1 to entity E2, that means:
    E1.A has the same value as E2.B
    E1.C has the same value as E2.C
    when E1.D is foreign key to entity with composite natural key, it means that
      component E of the key has the same value as E2.F.
      Warning: something like G=H.K is NOT allowed.
     */
    public final TableField<CatRelVwRecord, String> ATTREQUIVALENCE = createField("ATTREQUIVALENCE", org.jooq.impl.SQLDataType.VARCHAR(4000), this, "Defines, that some attributes have the same value on both sides of the relation. It is utilized by XML exports/imports.\nThe form is e.g:  A=B;C;D.E=F\n  when the ralation is from entity E1 to entity E2, that means:\n    E1.A has the same value as E2.B\n    E1.C has the same value as E2.C\n    when E1.D is foreign key to entity with composite natural key, it means that\n      component E of the key has the same value as E2.F.\n      Warning: something like G=H.K is NOT allowed.");

    /**
     * The column <code>CAT.CAT_REL_VW.NLSNAME</code>.
     */
    public final TableField<CatRelVwRecord, String> NLSNAME = createField("NLSNAME", org.jooq.impl.SQLDataType.NVARCHAR(200), this, "");

    /**
     * The column <code>CAT.CAT_REL_VW.NLSTONAME</code>.
     */
    public final TableField<CatRelVwRecord, String> NLSTONAME = createField("NLSTONAME", org.jooq.impl.SQLDataType.NVARCHAR(200), this, "");

    /**
     * The column <code>CAT.CAT_REL_VW.C_DESC</code>. Used to display relation in direction from source entity; contains name of relation and target entity.
     */
    public final TableField<CatRelVwRecord, String> C_DESC = createField("C_DESC", org.jooq.impl.SQLDataType.VARCHAR(404), this, "Used to display relation in direction from source entity; contains name of relation and target entity.");

    /**
     * The column <code>CAT.CAT_REL_VW.C_DESC_ADMIN</code>. Description used by administrators in client configuration
     */
    public final TableField<CatRelVwRecord, String> C_DESC_ADMIN = createField("C_DESC_ADMIN", org.jooq.impl.SQLDataType.VARCHAR(223), this, "Description used by administrators in client configuration");

    /**
     * The column <code>CAT.CAT_REL_VW.C_ENTITY_NM</code>.
     */
    public final TableField<CatRelVwRecord, String> C_ENTITY_NM = createField("C_ENTITY_NM", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>CAT.CAT_REL_VW.C_LIST</code>. Relation is usable for XML lists; profile dependent setting
     */
    public final TableField<CatRelVwRecord, String> C_LIST = createField("C_LIST", org.jooq.impl.SQLDataType.CHAR(1), this, "Relation is usable for XML lists; profile dependent setting");

    /**
     * The column <code>CAT.CAT_REL_VW.C_NLSDESC</code>. Used to display relation in direction from source entity; contains translated name of relation and target entity.
     */
    public final TableField<CatRelVwRecord, String> C_NLSDESC = createField("C_NLSDESC", org.jooq.impl.SQLDataType.NVARCHAR(404), this, "Used to display relation in direction from source entity; contains translated name of relation and target entity.");

    /**
     * The column <code>CAT.CAT_REL_VW.C_NLSTODESC</code>. Used to display relation in direction from target entity; contains translated name (target) of relation and tranlated name of source entity.
     */
    public final TableField<CatRelVwRecord, String> C_NLSTODESC = createField("C_NLSTODESC", org.jooq.impl.SQLDataType.NVARCHAR(404), this, "Used to display relation in direction from target entity; contains translated name (target) of relation and tranlated name of source entity.");

    /**
     * The column <code>CAT.CAT_REL_VW.C_QUERY</code>. Relation is usable from query; profile dependent setting
     */
    public final TableField<CatRelVwRecord, String> C_QUERY = createField("C_QUERY", org.jooq.impl.SQLDataType.CHAR(1), this, "Relation is usable from query; profile dependent setting");

    /**
     * The column <code>CAT.CAT_REL_VW.C_TODESC</code>. Used to display relation in direction from target entity; contains (reverse) name of relation and name of source entity.
     */
    public final TableField<CatRelVwRecord, String> C_TODESC = createField("C_TODESC", org.jooq.impl.SQLDataType.VARCHAR(404), this, "Used to display relation in direction from target entity; contains (reverse) name of relation and name of source entity.");

    /**
     * The column <code>CAT.CAT_REL_VW.C_TOENTITY_NM</code>.
     */
    public final TableField<CatRelVwRecord, String> C_TOENTITY_NM = createField("C_TOENTITY_NM", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * Create a <code>CAT.CAT_REL_VW</code> table reference
     */
    public CatRelVw() {
        this(DSL.name("CAT_REL_VW"), null);
    }

    /**
     * Create an aliased <code>CAT.CAT_REL_VW</code> table reference
     */
    public CatRelVw(String alias) {
        this(DSL.name(alias), CAT_REL_VW);
    }

    /**
     * Create an aliased <code>CAT.CAT_REL_VW</code> table reference
     */
    public CatRelVw(Name alias) {
        this(alias, CAT_REL_VW);
    }

    private CatRelVw(Name alias, Table<CatRelVwRecord> aliased) {
        this(alias, aliased, null);
    }

    private CatRelVw(Name alias, Table<CatRelVwRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Generated view for entity REL\nRelations (catalogue)"));
    }

    public <O extends Record> CatRelVw(Table<O> child, ForeignKey<O, CatRelVwRecord> key) {
        super(child, key, CAT_REL_VW);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Cat.CAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CatRelVw as(String alias) {
        return new CatRelVw(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CatRelVw as(Name alias) {
        return new CatRelVw(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CatRelVw rename(String name) {
        return new CatRelVw(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CatRelVw rename(Name name) {
        return new CatRelVw(name, null);
    }
}
